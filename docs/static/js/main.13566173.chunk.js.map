{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["makePositionFeatures","positions","type","features","map","position","geometry","coordinates","longitude","latitude","App","useState","setPositions","useEffect","a","stations","chargerstations","statuses","fetch","process","res","ok","statusText","json","console","warn","API_URL","chargingStations","pos","station","csmd","Position","match","slice","lat","lng","status","find","uuid","International_id","parseFloat","positionsWithStatus","useMemo","filter","iconMap","reduce","acc","availableCount","connectors","conn","totalCount","length","iconKey","set","get","Map","zoom","viewport","setViewport","undefined","width","height","mapboxApiAccessToken","onViewportChange","etc","mapStyle","style","Array","from","entries","iconPositions","key","id","data","layout","paint","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.13566173.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport ReactMapGL, { Layer, Source } from 'react-map-gl';\nimport './App.css';\n\nconst STATUS_AVAILABLE = 0\nconst STATUS_UNKNOWN = -1\n\ntype Connector = {\n  uuid: string;\n  status: number;\n  error: number;\n  timestamp: number;\n}\n\ntype StationStatus = {\n  uuid: string;\n  status: number;\n  connectors: Connector[];\n}\n\ntype ChargingStation = {\n  csmd: {\n    International_id: string;\n    Position: string;\n  };\n}\n\ntype StationPosition = {\n  latitude: number,\n  longitude: number,\n  status: StationStatus | null\n}\n\nconst API_URL = \"http://127.0.0.1:8081\"\nconst MAPBOX_API_ACCESS_TOKEN = 'pk.eyJ1Ijoiam9uYXNqc28iLCJhIjoiY2tkbjEzZ2RoMWRwcTJ6bXJwanpnYmFmNyJ9.m7V5GeFoMDSkX8uhyGmYUQ'\n\nfunction App() {\n\n  const [positions, setPositions] = useState<StationPosition[]>([]);\n\n  useEffect(() => {\n    (async function () {\n      let stations: any = { chargerstations: [] }\n      let statuses: StationStatus[] = [];\n      try {\n        let res = await fetch(process.env.PUBLIC_URL + \"/data/stations.json\")\n        if (!res.ok) throw res.statusText;\n        stations = (await res.json())\n      } catch (err) { \n        console.warn(err)   \n      }\n\n      try {\n        let res = await fetch(process.env.PUBLIC_URL + \"/data/statuses.json\")\n        if (!res.ok) throw res.statusText;\n        statuses = await res.json() as StationStatus[];\n      } catch (err) { \n        console.warn(err)   \n      }\n\n      try {\n        let res = await fetch(API_URL + \"/stations.json\")\n        if (!res.ok) throw res.statusText;\n        stations = (await res.json())\n      } catch (err) { \n        console.warn(err)   \n      }\n\n      try {\n        let res = await fetch(API_URL + \"/statuses.json\")\n        if (!res.ok) throw res.statusText;\n        statuses = await res.json() as StationStatus[];\n      } catch (err) { \n        console.warn(err)   \n      }\n\n      const chargingStations = stations.chargerstations as ChargingStation[]\n      const pos = chargingStations.map(\n        (station) => {\n          const [lat, lng] = station\n            .csmd\n            .Position\n            .match(/([\\d]+\\.[\\d]+),([\\d]+\\.[\\d]+)/)\n            ?.slice(1) ?? [\"0\", \"0\"]\n\n\n          const status = statuses.find(status => status.uuid === station.csmd.International_id) ?? null;\n          return {\n            longitude: parseFloat(lng),\n            latitude: parseFloat(lat),\n            status\n          }\n        }\n      ) as StationPosition[];\n      setPositions(pos)\n    })();\n  }, []);\n\n  let positionsWithStatus = useMemo(() => positions\n    .filter((position: StationPosition) => position.status)\n    .filter((position: StationPosition) => position.status!.status !== STATUS_UNKNOWN), [positions]);\n\n  const iconMap = useMemo(() => positionsWithStatus.reduce((acc: Map<string, StationPosition[]>, position: StationPosition) => {\n    const MAX_COUNT = 8\n\n    let availableCount = position.status!.connectors.reduce((acc, conn) => acc + (conn.status === STATUS_AVAILABLE ? 1 : 0), 0);\n    availableCount = availableCount > MAX_COUNT ? MAX_COUNT : availableCount;\n    let totalCount = position.status!.connectors.length;\n    totalCount = totalCount > MAX_COUNT ? MAX_COUNT : totalCount;\n\n    let occupiedCount = totalCount - availableCount;\n\n    const iconKey = \"station-\" + occupiedCount + \"-\" + availableCount\n    acc.set(iconKey, [...(acc.get(iconKey) ?? []), position]);\n\n    return acc;\n  }, new Map()), [positionsWithStatus]);\n\n\n\n  const [viewport, setViewport] = useState({\n    latitude:  positionsWithStatus[0]?.latitude ?? 60.5,\n    longitude: positionsWithStatus[0]?.longitude ?? 8.0,\n    zoom: 5\n  });\n\n  function onViewportChange(viewport: any) { \n    const {width, height, ...etc} = viewport\n    setViewport({...etc})\n  } \n  if (positionsWithStatus[0] === undefined) return <p>Waiting for data...</p>;\n\n  return (\n    <ReactMapGL\n      width='100vw'\n      height='100vh'\n      mapboxApiAccessToken={MAPBOX_API_ACCESS_TOKEN}\n      {...viewport}\n      onViewportChange={viewport => onViewportChange(viewport)}\n      mapStyle=\"mapbox://styles/jonasjso/ckdnf47e32nq31imtzdpo76lw/draft\"\n      style={{\n        height: '100vh',\n        width: '100vw'\n      }}\n    >\n      {Array.from(iconMap.entries()).map(([iconKey, iconPositions]) => \n      <Source   \n        key={iconKey}\n        id={\"source-\"+iconKey}  \n        type=\"geojson\"\n        data={makePositionFeatures(iconPositions)}\n      >\n        <Layer\n          type=\"symbol\"\n          layout={{\n            'icon-image': iconKey,\n            'icon-allow-overlap': true,\n            'icon-size': [\n              \"interpolate\", [\"linear\"], [\"zoom\"],\n              5, .05,\n              10, .1,\n              15, .2\n            ]\n          }}\n          paint={{}}\n          />\n    </Source>\n  )}\n</ReactMapGL>\n\n  );\n}\n\nfunction makePositionFeatures(positions: StationPosition[]) {\n  return {\n    type: 'FeatureCollection',\n    features: positions.map((position: StationPosition) => (\n      {type: 'Feature', geometry: {type: 'Point', coordinates: [position.longitude, position.latitude]}}\n    )),\n  } as any;\n}\n    \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>< App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}